import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'\nimport { enhancedHookGenerator } from '../services/enhancedHookGenerator.js'\nimport { detectContentStrategy } from '../services/aiService.js'\nimport { HookFormulaService, PsychologicalProfileService } from '../services/database.js'\nimport { Platform, Objective } from '../../shared/types.js'\n\n// Mock dependencies\nvi.mock('../services/database.js')\nvi.mock('../services/aiService.js')\nvi.mock('../middleware/logging.js')\n\nconst mockHookFormulas = [\n  {\n    id: '1',\n    code: 'QH-01',\n    name: 'Direct Question',\n    category: 'question-based',\n    description: 'Opens with a direct, engaging question',\n    structuralTemplate: '[Direct Question]? Here\\'s [answer/solution]...',\n    psychologicalTriggers: ['curiosity-gap', 'emotional-connection'],\n    primaryDriver: 'curiosity-gap',\n    effectivenessRating: 75,\n    riskFactor: 'low',\n    optimalNiches: ['education', 'how-to'],\n    exampleVariations: ['Have you ever wondered why some people succeed faster?'],\n    usageGuidelines: 'Use questions that genuinely intrigue your target audience',\n    cautionaryNotes: 'Avoid obvious or rhetorical questions',\n    avgEngagementRate: 68,\n    avgConversionRate: 15,\n    fatigueResistance: 85,\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: '2',\n    code: 'ST-01',\n    name: 'Direct Promise',\n    category: 'statement-based',\n    description: 'Makes a clear, valuable promise',\n    structuralTemplate: 'I\\'m going to show you [specific promise]...',\n    psychologicalTriggers: ['value-hit', 'authority-credibility'],\n    primaryDriver: 'value-hit',\n    effectivenessRating: 80,\n    riskFactor: 'medium',\n    optimalNiches: ['tutorials', 'education'],\n    exampleVariations: ['I\\'m going to show you how to double your productivity'],\n    usageGuidelines: 'Be specific and deliverable',\n    cautionaryNotes: 'Avoid overpromising',\n    avgEngagementRate: 71,\n    avgConversionRate: 22,\n    fatigueResistance: 80,\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  }\n]\n\nconst mockPsychologicalProfile = {\n  id: '1',\n  userId: 'test-user-id',\n  preferredTriggers: ['curiosity-gap', 'value-hit'],\n  avoidedTriggers: ['urgency-fomo'],\n  riskTolerance: 'medium' as const,\n  creativityLevel: 'balanced' as const,\n  successfulFormulas: ['QH-01', 'ST-01'],\n  underperformingFormulas: ['UE-02'],\n  preferredCategories: ['question-based', 'statement-based'],\n  contentStyle: 'mixed' as const,\n  urgencyPreference: 'moderate' as const,\n  learningRate: 75,\n  lastUpdated: new Date(),\n  profileCompleteness: 85,\n  createdAt: new Date(),\n  updatedAt: new Date()\n}\n\nconst mockGeneratedHooks = [\n  {\n    verbalHook: 'Are you tired of productivity advice that doesn\\'t work?',\n    visualHook: 'Person looking frustrated at computer with sticky notes everywhere',\n    textualHook: 'Real productivity secrets',\n    framework: 'QH-01: Direct Question',\n    psychologicalDriver: 'curiosity-gap' as const,\n    hookCategory: 'question-based' as const,\n    riskFactor: 'low' as const,\n    score: 4.2,\n    wordCount: 8,\n    scoreBreakdown: 'Word count: 95%, Specificity: 80%, Freshness: 85%',\n    rationale: 'Uses curiosity gap psychology to engage viewers with a relatable pain point',\n    platformNotes: 'Optimized for TikTok with dynamic opening visual',\n    contentTypeStrategy: 'curiosity_gap' as const,\n    platformSpecific: {\n      tiktokColdOpen: 'Quick montage of failed productivity attempts',\n      instagramOverlay: 'Productivity myths BUSTED',\n      youtubeProofCue: 'Statistics on failed productivity methods'\n    },\n    promiseContentMatch: true,\n    specificityScore: 0.8,\n    freshnessScore: 0.85\n  },\n  {\n    verbalHook: 'I\\'m going to show you the productivity system that changed everything',\n    visualHook: 'Before/after workspace transformation',\n    textualHook: 'The system that works',\n    framework: 'ST-01: Direct Promise',\n    psychologicalDriver: 'value-hit' as const,\n    hookCategory: 'statement-based' as const,\n    riskFactor: 'medium' as const,\n    score: 4.5,\n    wordCount: 11,\n    scoreBreakdown: 'Word count: 88%, Specificity: 90%, Freshness: 75%',\n    rationale: 'Direct value proposition with transformation promise',\n    platformNotes: 'Strong authority positioning for YouTube',\n    contentTypeStrategy: 'value_hit' as const,\n    platformSpecific: {\n      tiktokColdOpen: 'Split screen before/after workspace',\n      instagramOverlay: 'Game-changing system',\n      youtubeProofCue: 'Testimonials from users who succeeded'\n    },\n    promiseContentMatch: true,\n    specificityScore: 0.9,\n    freshnessScore: 0.75\n  }\n]\n\ndescribe('Enhanced Hook Generator', () => {\n  beforeEach(() => {\n    // Mock HookFormulaService\n    vi.mocked(HookFormulaService.findAll).mockResolvedValue(mockHookFormulas)\n    vi.mocked(HookFormulaService.getTrendAnalysis).mockResolvedValue([\n      {\n        id: '1',\n        formulaCode: 'QH-01',\n        platform: 'tiktok',\n        weeklyUsage: 15,\n        monthlyUsage: 60,\n        avgPerformanceScore: 75,\n        trendDirection: 'stable',\n        fatigueLevel: 25,\n        lastHighPerformance: new Date(),\n        consecutiveLowPerformance: 0,\n        seasonalityPattern: {},\n        optimalTimeframes: [],\n        contextFactors: {},\n        recommendationStatus: 'active',\n        alternativeFormulas: [],\n        lastCalculated: new Date(),\n        dataPoints: 50,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ])\n    \n    // Mock PsychologicalProfileService\n    vi.mocked(PsychologicalProfileService.findByUserId).mockResolvedValue(mockPsychologicalProfile)\n    vi.mocked(PsychologicalProfileService.updateFromPerformanceAnalysis).mockResolvedValue(mockPsychologicalProfile)\n    \n    // Mock detectContentStrategy\n    vi.mocked(detectContentStrategy).mockReturnValue({\n      contentType: 'educational',\n      primaryStrategy: 'value_hit',\n      suggestedCategories: ['statement-based', 'question-based'],\n      emotionalTriggers: ['value-hit', 'curiosity-gap'],\n      cognitiveBiases: ['authority', 'instant-gratification'],\n      riskProfile: 'balanced'\n    })\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('generateEnhancedHooks', () => {\n    it('should generate enhanced hooks with psychological framework analysis', async () => {\n      // Mock the AI generation to return our test hooks\n      const mockGenerateHooksWithAI = vi.fn().mockResolvedValue(mockGeneratedHooks)\n      vi.doMock('../services/aiService.js', () => ({\n        generateHooksWithAI: mockGenerateHooksWithAI,\n        detectContentStrategy: vi.mocked(detectContentStrategy)\n      }))\n\n      const request = {\n        userId: 'test-user-id',\n        platform: 'tiktok' as Platform,\n        objective: 'watch_time' as Objective,\n        topic: 'productivity tips for remote workers',\n        modelType: 'gpt-4o-mini' as const,\n        adaptationLevel: 70\n      }\n\n      const result = await enhancedHookGenerator.generateEnhancedHooks(request)\n\n      // Verify structure\n      expect(result).toHaveProperty('id')\n      expect(result).toHaveProperty('hooks')\n      expect(result).toHaveProperty('topThreeVariants')\n      expect(result).toHaveProperty('psychologicalStrategy')\n      expect(result).toHaveProperty('hookTaxonomyAnalysis')\n      expect(result).toHaveProperty('triModalCoordination')\n      expect(result).toHaveProperty('qualityAssessment')\n      expect(result).toHaveProperty('freshTwistElements')\n      expect(result).toHaveProperty('recommendedFollowUps')\n\n      // Verify hooks are enhanced\n      expect(result.hooks).toHaveLength(2)\n      expect(result.hooks[0]).toHaveProperty('psychologicalResonance')\n      expect(result.hooks[0]).toHaveProperty('cognitiveAlignment')\n      expect(result.hooks[0]).toHaveProperty('personalizationScore')\n\n      // Verify psychological strategy\n      expect(result.psychologicalStrategy).toHaveProperty('selectedStrategy')\n      expect(result.psychologicalStrategy).toHaveProperty('psychologicalReasoning')\n      expect(result.psychologicalStrategy).toHaveProperty('adaptationLevel', 70)\n      expect(result.psychologicalStrategy.confidenceScore).toBeGreaterThan(75)\n\n      // Verify taxonomy analysis\n      expect(result.hookTaxonomyAnalysis).toHaveProperty('formulasUsed')\n      expect(result.hookTaxonomyAnalysis).toHaveProperty('categoryDistribution')\n      expect(result.hookTaxonomyAnalysis).toHaveProperty('driverDistribution')\n      expect(result.hookTaxonomyAnalysis.fatiguePreventionApplied).toBe(true)\n\n      // Verify tri-modal coordination\n      expect(result.triModalCoordination).toHaveProperty('synergisticElements')\n      expect(result.triModalCoordination).toHaveProperty('platformSpecificOptimizations')\n      expect(result.triModalCoordination).toHaveProperty('modalityBalance')\n\n      // Verify quality assessment\n      expect(result.qualityAssessment.averageScore).toBeGreaterThan(4.0)\n      expect(result.qualityAssessment.promiseContentMatchRate).toBe(1.0)\n      expect(result.qualityAssessment.psychologicalResonanceAverage).toBeGreaterThan(0.5)\n    })\n\n    it('should apply personalization based on user profile', async () => {\n      const mockGenerateHooksWithAI = vi.fn().mockResolvedValue(mockGeneratedHooks)\n      vi.doMock('../services/aiService.js', () => ({\n        generateHooksWithAI: mockGenerateHooksWithAI,\n        detectContentStrategy: vi.mocked(detectContentStrategy)\n      }))\n\n      const request = {\n        userId: 'test-user-id',\n        platform: 'youtube' as Platform,\n        objective: 'saves' as Objective,\n        topic: 'advanced productivity techniques',\n        adaptationLevel: 90\n      }\n\n      const result = await enhancedHookGenerator.generateEnhancedHooks(request)\n\n      // Should have high adaptation level\n      expect(result.psychologicalStrategy.adaptationLevel).toBe(90)\n      \n      // Should show personalization in enhanced hooks\n      const enhancedHook = result.hooks.find(h => (h as any).personalizationScore > 0)\n      expect(enhancedHook).toBeDefined()\n      \n      // Should use successful formulas from profile\n      const usedFormulas = result.hookTaxonomyAnalysis.formulasUsed\n      expect(usedFormulas.some(formula => \n        mockPsychologicalProfile.successfulFormulas.some(successful => formula.includes(successful))\n      )).toBe(true)\n    })\n\n    it('should prevent hook fatigue by avoiding oversaturated formulas', async () => {\n      // Mock high fatigue formula\n      vi.mocked(HookFormulaService.getTrendAnalysis).mockResolvedValue([\n        {\n          id: '1',\n          formulaCode: 'QH-01',\n          platform: 'tiktok',\n          weeklyUsage: 150, // High usage\n          monthlyUsage: 600,\n          avgPerformanceScore: 45, // Low performance\n          trendDirection: 'falling',\n          fatigueLevel: 85, // High fatigue\n          lastHighPerformance: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n          consecutiveLowPerformance: 5,\n          seasonalityPattern: {},\n          optimalTimeframes: [],\n          contextFactors: {},\n          recommendationStatus: 'caution',\n          alternativeFormulas: ['QH-02', 'QH-03'],\n          lastCalculated: new Date(),\n          dataPoints: 200,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ])\n\n      const mockGenerateHooksWithAI = vi.fn().mockResolvedValue(mockGeneratedHooks)\n      vi.doMock('../services/aiService.js', () => ({\n        generateHooksWithAI: mockGenerateHooksWithAI,\n        detectContentStrategy: vi.mocked(detectContentStrategy)\n      }))\n\n      const request = {\n        userId: 'test-user-id',\n        platform: 'tiktok' as Platform,\n        objective: 'shares' as Objective,\n        topic: 'viral content strategy'\n      }\n\n      const result = await enhancedHookGenerator.generateEnhancedHooks(request)\n\n      // Should indicate fatigue prevention was applied\n      expect(result.hookTaxonomyAnalysis.fatiguePreventionApplied).toBe(false) // High fatigue formula filtered out\n      \n      // Should include fresh twist elements\n      expect(result.freshTwistElements.length).toBeGreaterThan(0)\n    })\n\n    it('should provide platform-specific tri-modal coordination', async () => {\n      const mockGenerateHooksWithAI = vi.fn().mockResolvedValue(mockGeneratedHooks)\n      vi.doMock('../services/aiService.js', () => ({\n        generateHooksWithAI: mockGenerateHooksWithAI,\n        detectContentStrategy: vi.mocked(detectContentStrategy)\n      }))\n\n      const request = {\n        userId: 'test-user-id',\n        platform: 'instagram' as Platform,\n        objective: 'saves' as Objective,\n        topic: 'Instagram growth hacks'\n      }\n\n      const result = await enhancedHookGenerator.generateEnhancedHooks(request)\n\n      // Should have Instagram-specific optimizations\n      expect(result.triModalCoordination.platformSpecificOptimizations).toHaveProperty('instagram')\n      \n      // Should have proper modality balance\n      expect(result.triModalCoordination.modalityBalance.verbal).toBe(1.0) // All hooks should have verbal\n      expect(result.triModalCoordination.modalityBalance.visual).toBe(1.0) // All should have visual\n      \n      // Should ensure text overlays comply with Instagram limits\n      result.hooks.forEach(hook => {\n        if (hook.textualHook) {\n          expect(hook.textualHook.length).toBeLessThanOrEqual(24) // Instagram character limit\n        }\n      })\n    })\n\n    it('should generate appropriate recommended follow-ups', async () => {\n      const mockGenerateHooksWithAI = vi.fn().mockResolvedValue(mockGeneratedHooks)\n      vi.doMock('../services/aiService.js', () => ({\n        generateHooksWithAI: mockGenerateHooksWithAI,\n        detectContentStrategy: vi.mocked(detectContentStrategy)\n      }))\n\n      const request = {\n        userId: 'test-user-id',\n        platform: 'youtube' as Platform,\n        objective: 'ctr' as Objective,\n        topic: 'YouTube thumbnail design'\n      }\n\n      const result = await enhancedHookGenerator.generateEnhancedHooks(request)\n\n      // Should have meaningful follow-up recommendations\n      expect(result.recommendedFollowUps.length).toBeGreaterThan(0)\n      \n      // Should suggest A/B testing for high-scoring hooks\n      const topHook = result.hooks[0]\n      if (topHook.score > 4.0) {\n        expect(result.recommendedFollowUps.some(rec => \n          rec.includes('A/B test') && rec.includes(topHook.verbalHook.slice(0, 20))\n        )).toBe(true)\n      }\n      \n      // Should suggest platform expansion\n      expect(result.recommendedFollowUps.some(rec => \n        rec.includes('tiktok') || rec.includes('instagram')\n      )).toBe(true)\n    })\n\n    it('should handle errors gracefully', async () => {\n      // Mock AI service to throw error\n      const mockGenerateHooksWithAI = vi.fn().mockRejectedValue(new Error('AI service unavailable'))\n      vi.doMock('../services/aiService.js', () => ({\n        generateHooksWithAI: mockGenerateHooksWithAI,\n        detectContentStrategy: vi.mocked(detectContentStrategy)\n      }))\n\n      const request = {\n        userId: 'test-user-id',\n        platform: 'tiktok' as Platform,\n        objective: 'watch_time' as Objective,\n        topic: 'test topic'\n      }\n\n      await expect(enhancedHookGenerator.generateEnhancedHooks(request))\n        .rejects.toThrow('Enhanced hook generation failed')\n    })\n  })\n\n  describe('Content Strategy Detection', () => {\n    it('should detect educational content strategy correctly', () => {\n      const result = detectContentStrategy('How to improve your productivity with these 5 proven techniques', 'saves')\n      \n      expect(result.contentType).toBe('educational')\n      expect(result.primaryStrategy).toBe('value_hit')\n      expect(result.suggestedCategories).toContain('statement-based')\n      expect(result.emotionalTriggers).toContain('value-hit')\n      expect(result.cognitiveBiases).toContain('instant-gratification')\n    })\n\n    it('should detect storytelling content strategy correctly', () => {\n      const result = detectContentStrategy('My journey from broke to millionaire changed everything', 'shares')\n      \n      expect(result.contentType).toBe('storytelling')\n      expect(result.primaryStrategy).toBe('curiosity_gap')\n      expect(result.suggestedCategories).toContain('narrative')\n      expect(result.emotionalTriggers).toContain('emotional-connection')\n      expect(result.cognitiveBiases).toContain('social-proof')\n    })\n\n    it('should assign appropriate risk profiles', () => {\n      const urgentResult = detectContentStrategy('Act now before this opportunity disappears forever', 'shares')\n      expect(urgentResult.riskProfile).toBe('aggressive')\n      \n      const educationalResult = detectContentStrategy('Scientific research reveals the best study methods', 'saves')\n      expect(educationalResult.riskProfile).toBe('conservative')\n      \n      const mixedResult = detectContentStrategy('Simple life hack everyone should know', 'ctr')\n      expect(mixedResult.riskProfile).toBe('balanced')\n    })\n  })\n\n  describe('Quality Scoring System', () => {\n    it('should calculate psychological resonance correctly', () => {\n      // This would test the private methods through the public interface\n      // The actual scoring is tested through the main generation function\n      const request = {\n        userId: 'test-user-id',\n        platform: 'tiktok' as Platform,\n        objective: 'watch_time' as Objective,\n        topic: 'productivity tips that actually work'\n      }\n\n      // The quality assessment should reflect psychological alignment\n      // This is indirectly tested through the main function\n      expect(true).toBe(true) // Placeholder for integration test\n    })\n  })\n})\n\n// Integration test for the complete psychological framework\ndescribe('Psychological Framework Integration', () => {\n  it('should demonstrate complete workflow from strategy to output', async () => {\n    // Mock all dependencies\n    vi.mocked(HookFormulaService.findAll).mockResolvedValue(mockHookFormulas)\n    vi.mocked(HookFormulaService.getTrendAnalysis).mockResolvedValue([])\n    vi.mocked(PsychologicalProfileService.findByUserId).mockResolvedValue(mockPsychologicalProfile)\n    \n    const mockGenerateHooksWithAI = vi.fn().mockResolvedValue(mockGeneratedHooks)\n    vi.doMock('../services/aiService.js', () => ({\n      generateHooksWithAI: mockGenerateHooksWithAI,\n      detectContentStrategy: vi.mocked(detectContentStrategy)\n    }))\n\n    const request = {\n      userId: 'test-user-id',\n      platform: 'youtube' as Platform,\n      objective: 'saves' as Objective,\n      topic: 'Advanced productivity techniques for entrepreneurs',\n      adaptationLevel: 85,\n      psychologicalPreferences: {\n        riskTolerance: 'balanced' as const,\n        preferredTriggers: ['value-hit', 'authority-credibility'],\n        avoidedTriggers: ['urgency-fomo']\n      }\n    }\n\n    const result = await enhancedHookGenerator.generateEnhancedHooks(request)\n\n    // Verify complete psychological framework integration\n    expect(result.psychologicalStrategy.adaptationLevel).toBe(85)\n    expect(result.psychologicalStrategy.confidenceScore).toBeGreaterThan(80)\n    expect(result.hookTaxonomyAnalysis.formulasUsed.length).toBeGreaterThan(0)\n    expect(result.triModalCoordination.synergisticElements.length).toBeGreaterThan(0)\n    expect(result.qualityAssessment.averageScore).toBeGreaterThan(4.0)\n    expect(result.freshTwistElements).toBeDefined()\n    expect(result.recommendedFollowUps.length).toBeGreaterThan(2)\n    \n    // Verify hooks are properly enhanced with psychological data\n    result.hooks.forEach(hook => {\n      expect(hook).toHaveProperty('score')\n      expect(hook).toHaveProperty('psychologicalDriver')\n      expect(hook).toHaveProperty('hookCategory')\n      expect(hook).toHaveProperty('riskFactor')\n      expect(hook).toHaveProperty('specificityScore')\n      expect(hook).toHaveProperty('freshnessScore')\n      expect(hook).toHaveProperty('promiseContentMatch')\n    })\n  })\n})